# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import drone_service_pb2 as drone__service__pb2


class DroneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatus = channel.unary_unary(
                '/drone.DroneService/GetStatus',
                request_serializer=drone__service__pb2.StatusRequest.SerializeToString,
                response_deserializer=drone__service__pb2.StatusResponse.FromString,
                )
        self.GetStatusStream = channel.unary_stream(
                '/drone.DroneService/GetStatusStream',
                request_serializer=drone__service__pb2.StatusRequest.SerializeToString,
                response_deserializer=drone__service__pb2.StatusResponse.FromString,
                )
        self.ChangeMode = channel.unary_unary(
                '/drone.DroneService/ChangeMode',
                request_serializer=drone__service__pb2.ChangeModeRequest.SerializeToString,
                response_deserializer=drone__service__pb2.SimpleResponse.FromString,
                )
        self.Charge = channel.unary_unary(
                '/drone.DroneService/Charge',
                request_serializer=drone__service__pb2.ChargeRequest.SerializeToString,
                response_deserializer=drone__service__pb2.SimpleResponse.FromString,
                )
        self.ChargeStream = channel.unary_stream(
                '/drone.DroneService/ChargeStream',
                request_serializer=drone__service__pb2.ChargeRequest.SerializeToString,
                response_deserializer=drone__service__pb2.ChargeResponse.FromString,
                )


class DroneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatusStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Charge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChargeStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=drone__service__pb2.StatusRequest.FromString,
                    response_serializer=drone__service__pb2.StatusResponse.SerializeToString,
            ),
            'GetStatusStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetStatusStream,
                    request_deserializer=drone__service__pb2.StatusRequest.FromString,
                    response_serializer=drone__service__pb2.StatusResponse.SerializeToString,
            ),
            'ChangeMode': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeMode,
                    request_deserializer=drone__service__pb2.ChangeModeRequest.FromString,
                    response_serializer=drone__service__pb2.SimpleResponse.SerializeToString,
            ),
            'Charge': grpc.unary_unary_rpc_method_handler(
                    servicer.Charge,
                    request_deserializer=drone__service__pb2.ChargeRequest.FromString,
                    response_serializer=drone__service__pb2.SimpleResponse.SerializeToString,
            ),
            'ChargeStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChargeStream,
                    request_deserializer=drone__service__pb2.ChargeRequest.FromString,
                    response_serializer=drone__service__pb2.ChargeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'drone.DroneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DroneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drone.DroneService/GetStatus',
            drone__service__pb2.StatusRequest.SerializeToString,
            drone__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatusStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/drone.DroneService/GetStatusStream',
            drone__service__pb2.StatusRequest.SerializeToString,
            drone__service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drone.DroneService/ChangeMode',
            drone__service__pb2.ChangeModeRequest.SerializeToString,
            drone__service__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Charge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drone.DroneService/Charge',
            drone__service__pb2.ChargeRequest.SerializeToString,
            drone__service__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChargeStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/drone.DroneService/ChargeStream',
            drone__service__pb2.ChargeRequest.SerializeToString,
            drone__service__pb2.ChargeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
